<link rel="stylesheet" type="text/css" href="/assets/widget_panel/style.css">

<% unless current_page?(component_named_expanded_path) %>
<%# Inline Widget (My Widgets) %>
<section class="widget_panel text-primary">
  <header class="flex items-center justify-between px-8">
    <p id="widgets-heading" role="heading" aria-level="1" class="my-0 subtitle2">My Widgets</p>
    <mx-button btn-type="text" icon="icon icon-plus-circle">Add</mx-button>
  </header>
  <p id="reorder-help" class="sr-only">
    Activate the reorder button and use the arrow keys to reorder the list. Press Escape or Tab to cancel the reordering.
  </p>
  <ol class="widget-grid" aria-labelledby="widgets-heading">
    <% @user_widgets.each do |widget| %>
      <li data-widget="<%= widget %>"><%= render Object.const_get("#{widget.camelize}::#{widget.camelize}Component").new %></li>
    <% end %>
  </ol>
</section>

<%# Inline Widget Script (My Widgets) %>
<script type="module">
const WIDGET_LIBRARY = 'widget_library';
const root = document.querySelector('.widget_panel');

// Notify parent window of height changes
const resizeObserver = new ResizeObserver(entries => {
  const height = entries[0].contentRect.height;
  window.parent.postMessage(
    { type: 'RESIZE', payload: { id: 'widget_panel', height } },
    '*'
  );
});
resizeObserver.observe(root);

const addButton = root.querySelector('mx-button');
if (addButton) {
  addButton.addEventListener('click', () => {
    const url = `${window.location.origin}<%= component_named_expanded_path %>`;
    window.parent.postMessage({ type: 'EXPAND', payload: { url } }, '*');
  });
}

// Drag sorting

const KEYBOARD_DRAG_CLASSES = ['transform', '-translate-y-10'];
const MOUSE_DRAG_CLASSES = ['z-50', 'pointer-events-none'];
const dragHandleHtml = widget => `
  <div class="touch-drag-handle mr-10">
    <button
      class="keyboard-drag-button flex pointer-events-none"
      aria-describedby="reorder-help"
      aria-label="Reorder ${widget}"
    >
      <span class="icon icon-drag"></span>
    </button>
  </div>`;
let draggedWidget; // Widget being dragged
let overWidget; // Widget being dragged over
let offsetX, offsetY; // Pointer offset from top left of widget when dragging started

// Add drag handles and event listeners
const widgets = root.querySelectorAll('li');
widgets.forEach((widget, i) => {
  const header = widget.querySelector('header');
  header.insertAdjacentHTML(
    'afterbegin',
    dragHandleHtml(widget.dataset.widget)
  );
  header.classList.add('cursor-move');
  widget.addEventListener('mousedown', onPointerDown);
  widget.addEventListener('touchstart', onPointerDown);
  widget.addEventListener('mouseover', onMouseOver);
  const keyboardDragButton = widget.querySelector('.keyboard-drag-button');
  keyboardDragButton.addEventListener('keydown', onKeyDown);
});
resetWidgetOrderAttributes();

function onPointerDown(e) {
  let handle =
    e.type === 'mousedown'
      ? e.target.closest('header')
      : e.target.closest('.touch-drag-handle');
  if (!handle) return; // Do not drag unless dragging by the drag handle
  e.preventDefault();
  draggedWidget = e.target.closest('li');
  draggedWidget.classList.add(...MOUSE_DRAG_CLASSES);
  const { clientX, clientY } = getPointer(e);
  offsetX = clientX - draggedWidget.offsetLeft;
  offsetY = clientY - draggedWidget.offsetTop;
  window.addEventListener('mousemove', onPointerMove);
  window.addEventListener('touchmove', onPointerMove);
  window.addEventListener('mouseup', onPointerUp);
  window.addEventListener('touchend', onPointerUp);
}

function onMouseOver(e) {
  if (!draggedWidget || e.buttons === 0) return; // Only drag if mouse is down
  e.preventDefault();
  visuallyReorder(e.target.closest('li'));
}

function onPointerMove(e) {
  if (!draggedWidget) return;
  const rect = draggedWidget.getBoundingClientRect();
  const { clientX, clientY } = getPointer(e);
  const x = clientX - draggedWidget.offsetLeft - offsetX;
  const y = clientY - draggedWidget.offsetTop - offsetY;
  draggedWidget.style.transform = `translate(${x}px, ${y}px)`;
  if (e.type === 'touchmove') {
    // Since there is no mouseover event for touch, we need to check for element using elementFromPoint
    const target = document.elementFromPoint(clientX, clientY);
    if (!target) return;
    const targetWidget = target.closest('li');
    if (targetWidget) visuallyReorder(targetWidget);
  }
}

function onPointerUp(e) {
  if (!draggedWidget) return;
  draggedWidget.style.transform = '';
  draggedWidget.classList.remove(...MOUSE_DRAG_CLASSES);
  reorderWidgetElements();
  draggedWidget = null;
  window.removeEventListener('mousemove', onPointerMove);
  window.removeEventListener('touchmove', onPointerMove);
  window.addEventListener('mouseup', onPointerUp);
  window.addEventListener('touchend', onPointerUp);
  // TODO: Persist new order
}

function onKeyDown(e) {
  if (['Enter', ' '].includes(e.key)) {
    if (draggedWidget) return keyboardDrop(e);
    return keyboardPickUp(e);
  }
  if (!draggedWidget) return;
  if (['Tab', 'Escape'].includes(e.key)) return keyboardCancel();
  if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
    return keyboardMove(e);
  }
}

function keyboardPickUp(e) {
  e.preventDefault();
  draggedWidget = e.target.closest('li');
  document.activeElement.setAttribute('aria-pressed', 'true');
  draggedWidget.classList.add(...KEYBOARD_DRAG_CLASSES);
}

function keyboardMove(e) {
  e.preventDefault();
  const order = getOrder(draggedWidget);
  const widgets = Array.from(root.querySelectorAll('li')).sort(
    (a, b) => getOrder(a) - getOrder(b)
  );
  if (['ArrowUp', 'ArrowLeft'].includes(e.key) && order !== 0) {
    visuallyReorder(widgets[order - 1]);
  } else if (
    ['ArrowDown', 'ArrowRight'].includes(e.key) &&
    order !== widgets.length - 1
  ) {
    visuallyReorder(widgets[order + 1]);
  }
}

function keyboardCancel() {
  overWidget = null;
  keyboardDrop();
}

function keyboardDrop(e) {
  if (!draggedWidget) return;
  if (e) e.preventDefault();
  draggedWidget.classList.remove(...KEYBOARD_DRAG_CLASSES);
  reorderWidgetElements();
  document.activeElement.setAttribute('aria-pressed', 'false');
  draggedWidget = null;
}

function visuallyReorder(newOverWidget) {
  // Safari is slow to update the DOM, so while dragging, we only update the CSS order attribute.
  // This also allows us to cancel keyboard dragging by simply reverting the order attributes.
  overWidget = newOverWidget;
  root.querySelectorAll('li').forEach(widget => {
    if (widget === draggedWidget) widget.dataset.order = getOrder(overWidget);
    else if (getOrder(overWidget) > getOrder(draggedWidget)) {
      if (
        getOrder(widget) > getOrder(draggedWidget) &&
        getOrder(widget) <= getOrder(overWidget)
      ) {
        widget.dataset.order = getOrder(widget) - 1;
      }
    } else {
      if (
        getOrder(widget) < getOrder(draggedWidget) &&
        getOrder(widget) >= getOrder(overWidget)
      ) {
        widget.dataset.order = getOrder(widget) + 1;
      }
    }
  });
  // Apply the new order attributes using the dataset values set above
  root.querySelectorAll('li').forEach(widget => {
    widget.style.order = widget.dataset.order;
    widget.removeAttribute('data-order');
  });
}

function reorderWidgetElements() {
  const focused = document.activeElement;
  if (overWidget && getOrder(draggedWidget) !== getIndex(draggedWidget)) {
    const orderedWidgets = Array.from(root.querySelectorAll('li')).sort(
      (a, b) => getOrder(a) - getOrder(b)
    );
    orderedWidgets.forEach(widget => draggedWidget.parentElement.appendChild(widget));
    overWidget = null;
  }
  resetWidgetOrderAttributes();
  focused.focus(); // Keep focus on the keyboard-drag-button
}

function resetWidgetOrderAttributes() {
  root.querySelectorAll('li').forEach((widget, i) => {
    widget.style.order = i;
  });
}

function getOrder(el) {
  return parseInt(el.style.order || 0);
}

function getIndex(el) {
  return Array.from(root.querySelectorAll('li')).indexOf(el);
}

function getPointer(e) {
  if (e.type === 'touchstart' || e.type === 'touchmove') {
    return e.touches[0];
  } else {
    return e;
  }
}
</script>

<% else %>
<%# Expanded Widget (Widget Library) %>
<div class="widget_panel w-screen h-screen">
  <mx-modal large close-on-escape="false">
    <div slot="header-left">Library</div>
    <div class="widget-library-grid">
      <% @active_widgets.each do |widget| %>
        <div data-widget="<%= widget %>" class="px-16 pt-16 pb-24 bg-white rounded-lg">
          <div class="px-8 mb-20">
            <mx-button btn-type="text" icon="icon icon-plus-circle" class="add-button <%= @user_widgets.include?(widget) ? "hidden" : "" %>">
              <span class="button-text">Add widget</span>
            </mx-button>
            <div class="remove-button-wrapper relative <%= @user_widgets.include?(widget) ? "" : "hidden" %>">
              <!-- It was cleaner to do this with two buttons and CSS instead of JavaScript. -->
              <!-- Remove button that is hovered/focused/active.  -->
              <mx-button btn-type="text" icon="icon icon-minus-circle" class="remove-button absolute left-0 opacity-0 hover:opacity-100 focus-within:opacity-100">
                Remove from Dashboard
              </mx-button>
              <!-- Not hovered/focused/active -->
              <mx-button btn-type="text" icon="icon icon-checkbox-circle" class="added-button pointer-events-none" disabled>
                Added to Dashboard
              </mx-button>
            </div>
          </div>
          <%= render Object.const_get("#{widget.camelize}::#{widget.camelize}Component").new(library_mode: true) %>
          <div class="px-8 mt-20">
            <p role="heading" aria-level="3" class="overline2 my-0 mb-8">
              Description
            </p>
            <p class="text-4 my-0">
              <%# TODO: Use widget description set by admin %>
              View and track online activity for your listings.
            </p>
          </div>
        </div>
      <% end %>
    </div>
  </mx-modal>
</div>

<%# Expanded Widget Script (Widget Library) %>
<script type="module">
const root = document.querySelector('.widget_panel');
const sendCloseMessage = () => {
  window.parent.postMessage(
    { type: "CLOSE_EXPANDED", payload: {} },
    "*"
  );
}
const modal = root.querySelector("mx-modal");
setTimeout(() => modal.isOpen = true, 500);
modal.addEventListener("mxClose", sendCloseMessage);
/* The close-on-escape behavior provided by mx-modal does not work in an iframe. */
document.addEventListener("keydown", (e) => {
  if (e.key === "Escape") sendCloseMessage();
});

const addButtons = root.querySelectorAll(".add-button");
addButtons.forEach((button) => {
  button.addEventListener("click", (e) => {
    const widget = e.target.closest('[data-widget]').dataset.widget;
    // TODO: Add widget to user's dashboard
    // Show "Adding widget" button
    const mxButton = e.target.closest('mx-button');
    mxButton.icon = 'icon icon-arrows-clockwise';
    mxButton.querySelector('.button-text').innerText = 'Adding widget'
    mxButton.disabled = true;
    setTimeout(() => {
      // Replace add button with remove button
      mxButton.classList.add('hidden')
      mxButton.icon = 'icon icon-plus-circle';
      mxButton.querySelector('.button-text').innerText = 'Add widget'
      mxButton.disabled = false;
      const removeButtonWrapper = mxButton.parentElement.querySelector('.remove-button-wrapper');
      removeButtonWrapper.classList.remove('hidden');
    }, 500)
  });
});
const removeButtons = root.querySelectorAll(".remove-button");
removeButtons.forEach((button) => {
  button.addEventListener("click", (e) => {
    const widget = e.target.closest('[data-widget]').dataset.widget;
    // TODO: Remove widget
    const removeButtonWrapper = e.target.closest('.remove-button-wrapper');
    // Replace remove button with add button
    removeButtonWrapper.classList.add('hidden');
    const addButton = removeButtonWrapper.parentElement.querySelector('.add-button');
    addButton.classList.remove('hidden');
  });
});
</script>
<% end %>
